Texture2D    g_Texture;
SamplerState g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix
Texture2D g_TextureNorm;
SamplerState g_TextureNorm_sampler; // By convention, texture samplers must use the '_sampler' suffix

struct PSInput
{
    float4 Pos       : SV_POSITION;
    float3 WorldPos  : TEXCOORD0;
    float3 camPos : TEXCOORD1;
    float3 farZ  : TEXCOORD2;
    float3 fragPos : TEXCOORD3;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};



// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{


    float dv = length(PSIn.fragPos-PSIn.camPos);
    dv = dv / PSIn.farZ.x;

    if(dv>1) dv=1;

    float4 Color;

    Color.rgb = float3(dv,dv,dv);
    Color.a = 1.0;

    PSOut.Color = Color;
}