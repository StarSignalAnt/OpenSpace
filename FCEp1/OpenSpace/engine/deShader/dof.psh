Texture2D    g_Texture;
SamplerState g_Texture_sampler; // By convention, texture samplers must use the '_sampler' suffix
Texture2D    g_Texture2;
SamplerState g_Texture2_sampler; 
struct PSInput
{
    float4 Pos      : SV_POSITION;  // Transformed position, mandatory
    float2 UV       : TEXCOORD0;    // Texture coordinates
    float4 Color    : COLOR0;       // Vertex color
    float3 RealPos  : TEXCOORD1;    // World position or some custom 3D value
    float4 Extra    : TEXCOORD2;    // Custom data (e.g. lighting, effects, etc.)
    float4 View     : TEXCOORD3;    // View vector or any custom value
    float4 DOF : TEXCOORD4;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

// Note that if separate shader objects are not supported (this is only the case for old GLES3.0 devices), vertex
// shader output variable name must match exactly the name of the pixel shader input variable.
// If the variable has structure type (like in this example), the structure declarations must also be identical.
void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{

    float2 spos = PSIn.Pos.xy;

    if(spos.x<PSIn.View.x || spos.x>PSIn.View.x+PSIn.View.z || spos.y<PSIn.View.y || spos.y>PSIn.View.y+PSIn.View.w)
    {

        clip(-1);
        return;

    }

   //float4 Color = float4(0,0,0,0);


    //Color.rgb = g_Texture.Sample(g_Texture_sampler,PSIn.UV.xy).rgb*0.05 + g_Texture2.Sample(g_Texture2_sampler,PSIn.UV.xy).rgb;


    float depth = g_Texture.Sample(g_Texture_sampler,PSIn.UV.xy).r;

    float zd = abs(depth-PSIn.DOF.x);

    zd = zd / PSIn.DOF.y;

    if(zd>1.0){
        zd=1.0;
    }
    if(zd<0.1){
        zd=0;
    }




   float4 Color = float4(0,0,0,0);
    float samples=0;

    float blur_f=zd*0.075;

    for(float y=-5;y<5;y++){
    for(float x=-5;x<5;x++)
    {

        float2 uv = PSIn.UV.xy;
        uv.x = uv.x + (x*blur_f*0.1);
        uv.y = uv.y + (y*blur_f*0.1);
        Color.rgb += g_Texture2.Sample(g_Texture2_sampler,uv).rgb;    
        samples++;

    }
   }


    Color.rgb = Color.rgb / samples;




    Color.a=1.0;

    PSOut.Color = Color;
  


}





